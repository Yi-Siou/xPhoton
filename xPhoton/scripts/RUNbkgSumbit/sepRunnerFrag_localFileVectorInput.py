#!/usr/bin/env python2
def GetArg_PrintHelp():
    raise IOError('''Minor running code for xphoton. Note that the running_SOME_NUMBER.root is reversed index.
            Arg1 : Input a json file which is generated by sepRunner.py
            Arg2 : Provide an executable, which is a bash recognizable command.
            Opt3 : thread index, whichi is needed to be a int.
            ''')
def GetArg_JsonFile(argv):
    if len(argv) < 3: GetArg_PrintHelp()
    return argv[1]
def GetArg_Executable(argv):
    if len(argv) < 3: GetArg_PrintHelp()
    return argv[2]
def GetOpt_ThreadIdx(argv):
    if len(argv) > 3: return int(argv[3])
    return 0


def ReIndexing(threadNum_,idx_):
    return 100000*(threadNum_)+idx_
def Grouping(mylist_, groupingNumber):
    return [ ','.join(mylist_[n:n+groupingNumber]) for n in range(0, len(mylist_), groupingNumber) ]

def Enumerate_reversedIdx(mylist_):
    mylist=Grouping(mylist_, 10)
    tot=len(mylist)-1
    return [ (tot-idx, val) for idx,val in enumerate( mylist ) ]

def main(jsonfile, execfile, generalidx):
    fin=open(jsonfile,'r')
    inputdic=json.load(fin)

    workpath=inputdic['directory']
    inpaths=inputdic['paths']

    os.chdir(workpath)
    for fIdx, inputpath in Enumerate_reversedIdx(inpaths):
        #print( '{exe} {files} {idx} >> logging_{idx} 2>&1'.format(files=inputpath, idx=ReIndexing(generalidx,fIdx),exe=execfile ) )
        os.system( '{exe} {files} {idx} >> logging_{idx} 2>&1'.format(files=inputpath, idx=ReIndexing(generalidx,fIdx),exe=execfile ) )


if __name__ == '__main__':
    import sys
    import json
    import os

    jsonfile=GetArg_JsonFile(sys.argv)
    execfile=GetArg_Executable(sys.argv)
    generalidx=GetOpt_ThreadIdx(sys.argv)

    main(jsonfile,execfile,generalidx)

