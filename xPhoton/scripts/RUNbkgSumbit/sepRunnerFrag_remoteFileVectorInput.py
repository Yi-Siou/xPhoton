#!/usr/bin/env python2
## treat print as a function. (Which is a default for python3)
from __future__ import print_function
def GetArg_PrintHelp():
    raise IOError('''Minor running code for xphoton. Note that the running_SOME_NUMBER.root is reversed index.
            Arg1 : Input a json file which is generated by sepRunner.py
            Arg2 : Provide an executable, which is a bash recognizable command.
            Opt3 : thread index, whichi is needed to be a int.
            ''')
def GetArg_JsonFile(argv):
    if len(argv) < 3: GetArg_PrintHelp()
    return argv[1]
def GetArg_Executable(argv):
    if len(argv) < 3: GetArg_PrintHelp()
    return argv[2]
def GetOpt_ThreadIdx(argv):
    if len(argv) > 3: return int(argv[3])
    return 0


def ReIndexing(threadNum_,idx_): return 100000*(threadNum_)+idx_
def JoinFileListToArg(mylist): return ','.join(mylist)
def Grouping(mylist_, groupingNumber):
    return [ mylist_[n:n+groupingNumber] for n in range(0, len(mylist_), groupingNumber) ]
def Enumerate_reversedIdx(mylist):
    tot=len(mylist)-1
    return [ (tot-idx, val) for idx,val in enumerate( mylist ) ]


class SepRunnerFrag_remoteFileVectorInput(object):
    def __init__(self, jsonFILE, execCOMMAND, idxTHREAD):
        self.json_file=jsonFILE
        self.exec_command=execCOMMAND
        self.idx_thread=idxTHREAD
        self.num_grouping=4 # default
        self.testing=False
    def Testing(self): self.testing=True
    def SetNumGrouping(self, num):self.num_grouping=num
    def Exec(self):
        fin=open(self.json_file,'r')
        inputdic=json.load(fin)

        workpath=inputdic['directory']
        inpaths=inputdic['paths']

        os.chdir(workpath)

        execute_command=print if self.testing else os.system

        for fIdx, inputpath in Enumerate_reversedIdx( Grouping(inpaths,self.num_grouping) ):
            runningfiles=[]
            if self.testing:
                print('---- preparing stage ----')
            for rfIdx, remotefile in enumerate(inputpath):
                newfile='running_{idx}_{rfidx}.root'.format(idx=ReIndexing(self.idx_thread,fIdx),rfidx=rfIdx)
                execute_command( 'xrdcp -f --nopbar {rfile} {nfile} '.format(rfile=remotefile,nfile=newfile) )
                runningfiles.append(newfile)

            if self.testing:
                print('---- executing stage ----')
            execute_command( '{exe} {files} {idx} >> logging_{idx} 2>&1'.format(
                files=JoinFileListToArg(runningfiles),
                idx=ReIndexing(self.idx_thread,fIdx),
                exe=self.exec_command )
                )

            if self.testing:
                print('---- cleaning stage  ----')
            for rfIdx, remotefile in enumerate(inputpath):
                newfile='running_{idx}_{rfidx}.root'.format(idx=ReIndexing(self.idx_thread,fIdx),rfidx=rfIdx)
                execute_command( '/bin/rm          {nfile}'.format(                 nfile=newfile) )

            if self.testing:
                execute_command( '-=-=-=-=-= end of testing -=-=-=-=-=' )
                break
if __name__ == '__main__':
    import sys
    import json
    import os

    jsonfile=GetArg_JsonFile(sys.argv)
    execfile=GetArg_Executable(sys.argv)
    generalidx=GetOpt_ThreadIdx(sys.argv)


    mainobj=SepRunnerFrag_remoteFileVectorInput( jsonfile, execfile, generalidx)
    #mainobj.Testing()
    mainobj.SetNumGrouping(4)
    mainobj.Exec()
